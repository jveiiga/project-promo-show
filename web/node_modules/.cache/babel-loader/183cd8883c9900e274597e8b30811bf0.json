{"ast":null,"code":"var _jsxFileName = \"/Users/jefersonveiga/Documents/new-project/project-promo-show/web/src/components/UI/InfinitScroll/InfinitScroll.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UIInfinityScroll = ({\n  fetchMore\n}) => {\n  _s();\n\n  const containerRef = useEffect(() => {\n    const option = {\n      root: null,\n      rootMargin: '0px',\n      threshold: 1.0\n    };\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        observer.disconnect();\n        fetchMore();\n      }\n    }, option.observe(target));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 12\n  }, this);\n};\n\n_s(UIInfinityScroll, \"R1CzUoz9Mw4jxG1RDOZCScdJm/g=\");\n\n_c = UIInfinityScroll;\nexport default UIInfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"UIInfinityScroll\");","map":{"version":3,"sources":["/Users/jefersonveiga/Documents/new-project/project-promo-show/web/src/components/UI/InfinitScroll/InfinitScroll.js"],"names":["React","useEffect","UIInfinityScroll","fetchMore","containerRef","option","root","rootMargin","threshold","observer","IntersectionObserver","entry","isIntersecting","disconnect","observe","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACxC,QAAMC,YAAY,GAClBH,SAAS,CAAC,MAAM;AACZ,UAAMI,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,IADK;AAEXC,MAAAA,UAAU,EAAE,KAFD;AAGXC,MAAAA,SAAS,EAAE;AAHA,KAAf;AAKA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,CAAC,CAAEC,KAAF,CAAD,KAAe;AACrD,UAAKA,KAAK,CAACC,cAAX,EAA2B;AACvBH,QAAAA,QAAQ,CAACI,UAAT;AACAV,QAAAA,SAAS;AACZ;AACJ,KALgB,EAKdE,MAAM,CAACS,OAAP,CAAeC,MAAf,CALc,CAAjB;AAMH,GAZQ,EAYN,EAZM,CADT;AAeA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAjBD;;GAAMb,gB;;KAAAA,gB;AAmBN,eAAeA,gBAAf","sourcesContent":["import React, { useEffect } from 'react'\n\nconst UIInfinityScroll = ({ fetchMore }) => {\n    const containerRef = \n    useEffect(() => {\n        const option = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 1.0,\n        }\n        const observer = new IntersectionObserver(([ entry ]) => {\n            if ( entry.isIntersecting) {\n                observer.disconnect();\n                fetchMore();\n            }\n        }, option.observe(target))\n    }, [])\n\n    return <div />\n}\n\nexport default UIInfinityScroll;"]},"metadata":{},"sourceType":"module"}