{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nimport useDebouncedPromise from 'components/utils/useDebouncedPromise';\nconst initialRequestInfo = {\n  error: null,\n  data: null,\n  loading: false\n};\nexport default function useApi(config) {\n  _s();\n\n  const [requestInfo, setRequestInfo] = useState(initialRequestInfo);\n  const debouncedAxios = useDebouncedPromise(axios, config.debouncedDelay);\n\n  async function call(localconfig) {\n    let response = null;\n    const finalConfig = {\n      baseURL: 'http://localhost:5000',\n      ...config,\n      ...localconfig\n    };\n\n    if (!finalConfig.quietly) {\n      setRequestInfo({ ...initialRequestInfo,\n        loading: true\n      });\n    }\n\n    const fn = finalConfig.debounced ? debouncedAxios : axios;\n\n    try {\n      response = await fn(finalConfig);\n      const newRequestInfo = { ...initialRequestInfo,\n        data: response.data\n      };\n\n      if (response.headers['x-total-count'] !== undefined) {\n        newRequestInfo.total = Number.parseInt(response.headers['x-total-count'], 10);\n      }\n    } catch (error) {\n      setRequestInfo({ ...initialRequestInfo,\n        error\n      });\n    }\n\n    if (config.onCompleted) {\n      config.onCompleted(response);\n    }\n\n    return response;\n  }\n\n  return [call, requestInfo];\n}\n\n_s(useApi, \"EEfmtsDFSsj4OId9JjyW9aDzXdc=\", false, function () {\n  return [useDebouncedPromise];\n});","map":{"version":3,"sources":["/Users/jefersonveiga/Documents/new-project/project-promo-show/web/src/components/utils/useApi.js"],"names":["useState","axios","useDebouncedPromise","initialRequestInfo","error","data","loading","useApi","config","requestInfo","setRequestInfo","debouncedAxios","debouncedDelay","call","localconfig","response","finalConfig","baseURL","quietly","fn","debounced","newRequestInfo","headers","undefined","total","Number","parseInt","onCompleted"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,mBAAP,MAAgC,sCAAhC;AAEA,MAAMC,kBAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAE,IADgB;AAEvBC,EAAAA,IAAI,EAAE,IAFiB;AAGvBC,EAAAA,OAAO,EAAE;AAHc,CAA3B;AAMA,eAAe,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AAAA;;AACnC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAACG,kBAAD,CAA9C;AACA,QAAMQ,cAAc,GAAGT,mBAAmB,CAACD,KAAD,EAAQO,MAAM,CAACI,cAAf,CAA1C;;AAEA,iBAAeC,IAAf,CAAoBC,WAApB,EAAiC;AAE/B,QAAIC,QAAQ,GAAG,IAAf;AAEA,UAAMC,WAAW,GAAG;AAClBC,MAAAA,OAAO,EAAE,uBADS;AAElB,SAAGT,MAFe;AAGlB,SAAGM;AAHe,KAApB;;AAKA,QAAG,CAACE,WAAW,CAACE,OAAhB,EAAyB;AACvBR,MAAAA,cAAc,CAAC,EACb,GAAGP,kBADU;AAEbG,QAAAA,OAAO,EAAE;AAFI,OAAD,CAAd;AAID;;AAED,UAAMa,EAAE,GAAGH,WAAW,CAACI,SAAZ,GAAwBT,cAAxB,GAAyCV,KAApD;;AAEA,QAAI;AACFc,MAAAA,QAAQ,GAAG,MAAMI,EAAE,CAACH,WAAD,CAAnB;AACA,YAAMK,cAAc,GAAG,EACrB,GAAGlB,kBADkB;AAErBE,QAAAA,IAAI,EAAEU,QAAQ,CAACV;AAFM,OAAvB;;AAKA,UAAIU,QAAQ,CAACO,OAAT,CAAiB,eAAjB,MAAsCC,SAA1C,EAAoD;AAClDF,QAAAA,cAAc,CAACG,KAAf,GAAuBC,MAAM,CAACC,QAAP,CAAgBX,QAAQ,CAACO,OAAT,CAAiB,eAAjB,CAAhB,EAAmD,EAAnD,CAAvB;AACD;AAEF,KAXD,CAWE,OAAOlB,KAAP,EAAc;AACdM,MAAAA,cAAc,CAAC,EACb,GAAGP,kBADU;AAEbC,QAAAA;AAFa,OAAD,CAAd;AAID;;AAED,QAAII,MAAM,CAACmB,WAAX,EAAwB;AACtBnB,MAAAA,MAAM,CAACmB,WAAP,CAAmBZ,QAAnB;AACD;;AACD,WAAOA,QAAP;AACD;;AAGD,SAAO,CACHF,IADG,EAEHJ,WAFG,CAAP;AAIH;;GAnDuBF,M;UAEGL,mB","sourcesContent":["import { useState } from 'react'\nimport axios from 'axios';\nimport useDebouncedPromise from 'components/utils/useDebouncedPromise'\n\nconst initialRequestInfo = {\n    error: null,\n    data: null,\n    loading: false,\n};\n\nexport default function useApi(config) {\n    const [requestInfo, setRequestInfo] = useState(initialRequestInfo)\n    const debouncedAxios = useDebouncedPromise(axios, config.debouncedDelay) \n\n    async function call(localconfig) {\n      \n      let response = null;\n      \n      const finalConfig = {\n        baseURL: 'http://localhost:5000',\n        ...config, \n        ...localconfig\n      }\n      if(!finalConfig.quietly) {\n        setRequestInfo({\n          ...initialRequestInfo,\n          loading: true,\n        });\n      }\n      \n      const fn = finalConfig.debounced ? debouncedAxios : axios;\n\n      try {\n        response = await fn(finalConfig);\n        const newRequestInfo = {\n          ...initialRequestInfo,\n          data: response.data,\n        };\n\n        if (response.headers['x-total-count'] !== undefined){\n          newRequestInfo.total = Number.parseInt(response.headers['x-total-count'], 10);\n        }\n        \n      } catch (error) {\n        setRequestInfo({\n          ...initialRequestInfo,\n          error,\n        });\n      }\n \n      if (config.onCompleted) {\n        config.onCompleted(response);\n      }\n      return response;\n    }\n\n\n    return [\n        call,\n        requestInfo\n    ]\n}"]},"metadata":{},"sourceType":"module"}